//SJF ALGORITHM

#include <stdio.h>
#include <limits.h>

#define MAX_PROCESS 10

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int is_completed;
};

int findShortestProcess(struct Process processes[], int n, int current_time) {
    int shortest_remaining_time = INT_MAX;
    int shortest_process_index = -1;

    for (int i = 0; i < n; i++) {
        if (!processes[i].is_completed && processes[i].arrival_time <= current_time && processes[i].remaining_time < shortest_remaining_time) {
            shortest_remaining_time = processes[i].remaining_time;
            shortest_process_index = i;
        }
    }

    return shortest_process_index;
}

void SRTF(struct Process processes[], int n) {
    int current_time = 0;
    int completed_processes = 0;
    float total_waiting_time = 0;
    float total_turnaround_time = 0;

    while (completed_processes < n) {
        int shortest_process_index = findShortestProcess(processes, n, current_time);

        if (shortest_process_index == -1) {
            current_time++;
            continue;
        }

        processes[shortest_process_index].remaining_time--;
        current_time++;

        if (processes[shortest_process_index].remaining_time == 0) {
            completed_processes++;
            processes[shortest_process_index].completion_time = current_time;
            processes[shortest_process_index].turnaround_time = processes[shortest_process_index].completion_time - processes[shortest_process_index].arrival_time;
            processes[shortest_process_index].waiting_time = processes[shortest_process_index].turnaround_time - processes[shortest_process_index].burst_time;
            processes[shortest_process_index].is_completed = 1;
        }
    }

    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
    }

    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESS];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].id = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].is_completed = 0;
    }

    SRTF(processes, n);

    return 0;
}
